package com.example.user.netty_chatsystem;

import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.Image;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.example.user.netty_chatsystem.Chat_Client.handler.Client_MessageHandler;
import com.example.user.netty_chatsystem.Chat_Client.handler.Client_UserHandler;
import com.example.user.netty_chatsystem.Chat_DrawBoard.Accessory_picture.StickerImageView;
import com.example.user.netty_chatsystem.Chat_Listview_Message.ChatAdapter;
import com.example.user.netty_chatsystem.Chat_Listview_Message.ChatMessage;
import com.example.user.netty_chatsystem.Chat_WheelPicker.core.AbstractWheelPicker;
import com.example.user.netty_chatsystem.Chat_WheelPicker.view.WheelCrossPicker;
import com.example.user.netty_chatsystem.Chat_biz.entity.Message_entity;
import com.example.user.netty_chatsystem.Chat_biz.entity.file.ServerFile;
import com.example.user.netty_chatsystem.Chat_core.connetion.IMConnection;
import com.example.user.netty_chatsystem.Chat_core.protocol.Commands;
import com.example.user.netty_chatsystem.Chat_core.protocol.Handlers;
import com.example.user.netty_chatsystem.Chat_core.transport.Header;
import com.example.user.netty_chatsystem.Chat_core.transport.IMResponse;
import com.example.user.netty_chatsystem.Chat_mongodb.ServerRequest;
import com.example.user.netty_chatsystem.Chat_server.dto.FileDTO;
import com.example.user.netty_chatsystem.Chat_server.dto.MessageDTO;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

public class Chat_Activity extends AppCompatActivity  {
    EditText message_edit;
    ImageView sendmessage_imageview , back_imageview , bombSend_imageview;
    IMConnection connection;
    private ListView messagesContainer;
    private ChatAdapter adapter;

    String login_id;
    String friend_id;

    private ArrayList<ChatMessage> chatHistory;
    Client_MessageHandler client_messageHandler;

    List<NameValuePair> params;
    SharedPreferences pref;
    ServerRequest sr;

    //更改在設定中觀察者的眼睛圖示
    public int eyechange_count = 0;

    //更改最愛朋友的按鈕
    private int favorite_count = 0;

    // to take a picture
    private static final int CAMERA_PIC_REQUEST = 1111;
    private static final int GALLERY_PIC_REQUEST = 1112;

    //傳輸檔案的bytes陣列
    byte[] bytes;

    private int dataLength = 1024;
    private int sumCountpackage = 0;
    Uri selectedImage;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat_);
        getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.resource_chat_actionbar);

        sr = new ServerRequest();
        pref = getSharedPreferences("AppPref",MODE_PRIVATE);


        client_messageHandler = new Client_MessageHandler();
        client_messageHandler.setListener(new Client_MessageHandler.Listener() {
            @Override
            public void onInterestingEvent(Message_entity message) {
                Show_GetMessage(message);
            }
        });
        initControls();

        /*sendmessage_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                connection = Client_UserHandler.getConnection();
                Message message = new Message();
                message.setTo("123");
                message.setMessage(message_edit.getText().toString());

                IMResponse resp = new IMResponse();
                Header header = new Header();
                header.setHandlerId(Handlers.MESSAGE);
                header.setCommandId(Commands.USER_MESSAGE_REQUEST);
                resp.setHeader(header);
                resp.writeEntity(new MessageDTO(message));
                System.out.println(connection);
                connection.sendResponse(resp);
            }
        });*/

    }


    private void initControls() {
        messagesContainer = (ListView) findViewById(R.id.messagesContainer);
        message_edit = (EditText) findViewById(R.id.messageEdit);
        sendmessage_imageview = (ImageView) findViewById(R.id.messageSend_imageview);
        back_imageview = (ImageView)findViewById(R.id.back_imageview);
        bombSend_imageview = (ImageView)findViewById(R.id.bombSend_imageview);

        Bundle bundle = this.getIntent().getExtras();
        friend_id = bundle.getString("friend_id");
        login_id = Client_UserHandler.getLogin_id();
        loadDummyHistory();


        sendmessage_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                String messageText = message_edit.getText().toString();
                if (TextUtils.isEmpty(messageText)) {
                    return;
                }

                connection = Client_UserHandler.getConnection();
                Message_entity message = new Message_entity();
                message.setTo(friend_id);
                message.setFrom(login_id);
                message.setMessage(messageText);

                IMResponse resp = new IMResponse();
                Header header = new Header();
                header.setHandlerId(Handlers.MESSAGE);
                header.setCommandId(Commands.USER_MESSAGE_REQUEST);
                resp.setHeader(header);
                resp.writeEntity(new MessageDTO(message));
                connection.sendResponse(resp);

                ChatMessage chatMessage = new ChatMessage();
                chatMessage.setId(122);//dummy
                chatMessage.setMessage(messageText);
                chatMessage.setDate(DateFormat.getDateTimeInstance().format(new Date()));
                chatMessage.setMe(true);

                message_edit.setText("");

                displayMessage(chatMessage);
            }
        });

        bombSend_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                AlertDialog.Builder builder = new AlertDialog.Builder(v.getContext());
                builder.setTitle("Select:");
                final CharSequence[] chars = {"Take Picture", "Choose from Gallery"};
                builder.setItems(chars, new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (which == 0) {
                                    Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                                    startActivityForResult(cameraIntent, CAMERA_PIC_REQUEST);
                                } else if (which == 1) {
                                    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.INTERNAL_CONTENT_URI);
                                    startActivityForResult(intent, GALLERY_PIC_REQUEST);
                                }
                                dialog.dismiss();
                            }

                        }
                );
                builder.show();


                /*connection = Client_UserHandler.getConnection();
                ServerFile serverFile = new ServerFile();
                serverFile.setSendId(friend_id);
                serverFile.setReceiveId(login_id);


                IMResponse resp = new IMResponse();
                Header header = new Header();
                header.setHandlerId(Handlers.MESSAGE);
                header.setCommandId(Commands.USER_FILE_REQUEST);
                resp.setHeader(header);
                //resp.writeEntity(new MessageDTO(message));
                connection.sendResponse(resp);*/
            }
        });


        //返回鍵按鈕監聽
        back_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
    }

    //設定dialog_setiing上按鈕的功能
    public void Assign_settingdialog(final Dialog setting_dialog){
        ImageView editnameicon_imageview = (ImageView)setting_dialog.findViewById(R.id.editnameicon_imageview);
        ImageView viewericon_imageview = (ImageView)setting_dialog.findViewById(R.id.viewericon_imageview);
        ImageView blockadeicon_imageview = (ImageView)setting_dialog.findViewById(R.id.blockadeicon_imageview);
        ImageView deleteicon_imageview = (ImageView)setting_dialog.findViewById(R.id.deleteicon_imageview);


        editnameicon_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setting_dialog.dismiss();
                final Dialog editname_dialog = new Dialog(Chat_Activity.this, R.style.selectorDialog);
                editname_dialog.setContentView(R.layout.resource_friendlist_settinglist_editname_dialog);
                editname_dialog.show();

                ImageView  editname_yes_imageview = (ImageView)editname_dialog.findViewById(R.id.editname_yes_imageview);
                ImageView editname_no_imageview = (ImageView)editname_dialog.findViewById(R.id.editname_no_imageview);

                editname_yes_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editname_dialog.dismiss();
                    }
                });

                editname_no_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editname_dialog.dismiss();
                    }
                });
            }
        });

        viewericon_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setting_dialog.dismiss();
                final Dialog viewer_dialog = new Dialog(Chat_Activity.this, R.style.selectorDialog);
                viewer_dialog.setContentView(R.layout.resource_friendlist_settinglist_viewer_dialog);
                viewer_dialog.show();

                final ImageView eye_imageview = (ImageView)viewer_dialog.findViewById(R.id.eye_imageview);
                eye_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if(eyechange_count == 0){
                            eye_imageview.setImageResource(R.drawable.medical_open);
                            eyechange_count = 1;
                        }
                        else{
                            eye_imageview.setImageResource(R.drawable.medical_close);
                            eyechange_count = 0;
                        }
                    }
                });
            }
        });

        blockadeicon_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setting_dialog.dismiss();
                final Dialog blockade_dialog = new Dialog(Chat_Activity.this, R.style.selectorDialog);
                blockade_dialog.setContentView(R.layout.resource_friendlist_settinglist_blockade_dialog);
                blockade_dialog.show();

                ImageView blockade_yes_imageview = (ImageView)blockade_dialog.findViewById(R.id.blockade_yes_imageview);
                ImageView blockade_no_imageview = (ImageView)blockade_dialog.findViewById(R.id.blockade_no_imageview);

                blockade_yes_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        blockade_dialog.dismiss();
                    }
                });

                blockade_no_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        blockade_dialog.dismiss();
                    }
                });
            }
        });

        deleteicon_imageview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setting_dialog.dismiss();
                final Dialog delete_dialog = new Dialog(Chat_Activity.this, R.style.selectorDialog);
                delete_dialog.setContentView(R.layout.resource_friendlist_settinglist_delete_dialog);
                delete_dialog.show();

                ImageView delete_yes_imageview = (ImageView)delete_dialog.findViewById(R.id.delete_yes_imageview);
                ImageView delete_no_imageview = (ImageView)delete_dialog.findViewById(R.id.delete_no_imageview);

                delete_yes_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        delete_dialog.dismiss();
                    }
                });

                delete_no_imageview.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        delete_dialog.dismiss();
                    }
                });
            }
        });
    }


    public void displayMessage(ChatMessage message) {
        adapter.add(message);
        adapter.notifyDataSetChanged();
        scroll();
    }

    private void scroll() {
        messagesContainer.setSelection(messagesContainer.getCount() - 1);
    }

    private void loadDummyHistory(){

        params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair("from",friend_id));
        params.add(new BasicNameValuePair("to",login_id));
        ServerRequest sr = new ServerRequest();
        JSONObject json = sr.getJSON("http://10.0.2.2:3000/offlinemessage_get",params);
        System.out.println(json);
        if(json!=null){
            try{
                JSONArray jsonArray = json.getJSONArray("response");
                String []jsonstr = new String[jsonArray.length()];
                for(int i = 0 ; i < jsonArray.length() ; i++){
                    jsonstr[i] = jsonArray.getString(i);
                }
                chatHistory = new ArrayList<ChatMessage>();

                for(int i = 0 ; i < jsonstr.length ; i++){
                    ChatMessage msg = new ChatMessage();
                    msg.setId(1);
                    msg.setMe(false);
                    msg.setMessage(jsonstr[i]);
                    chatHistory.add(msg);
                }

                adapter = new ChatAdapter(Chat_Activity.this, new ArrayList<ChatMessage>());
                messagesContainer.setAdapter(adapter);
                for(int i=0; i<chatHistory.size(); i++) {
                    ChatMessage message = chatHistory.get(i);
                    displayMessage(message);
                }

            }catch(JSONException e){
                e.printStackTrace();
            }
        }
    }

    public void Show_GetMessage(Message_entity message){
        if(friend_id.equals(message.getFrom())) {
            ChatMessage getmsg = new ChatMessage();
            getmsg.setId(2);
            getmsg.setMe(false);
            getmsg.setMessage(message.getMessage());
            getmsg.setDate(DateFormat.getDateTimeInstance().format(new Date()));
            Bundle bundle = new Bundle();
            bundle.putSerializable("GetMsg", getmsg);
            Message msg = new Message();
            msg.setData(bundle);
            handler.sendMessage(msg);
        }
    }

    //專門處理接收過來的訊息的handler , 並將它放在list view上
    protected Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg)
        {
            super.handleMessage(msg);
            // Put code here...

            // Set a switch statement to toggle it on or off.
            ChatMessage getmsg = (ChatMessage)msg.getData().getSerializable("GetMsg");

            displayMessage(getmsg);


        }
    };

    //專門處理送出去與接受過來file的handler
    protected Handler fileHandler = new Handler(){
        @Override
        public void handleMessage(Message msg){
            super.handleMessage(msg);
            switch(msg.what){
                case 1 :{
                    if ((bytes.length % dataLength == 0))
                        sumCountpackage = bytes.length / dataLength;
                    else
                        sumCountpackage = (bytes.length / dataLength) + 1;

                    Log.i("TAG", "文件總長度:" + bytes.length);
                    ServerFile serverFile = new ServerFile();
                    serverFile.setSumCountPackage(sumCountpackage);
                    serverFile.setCountPackage(1);
                    serverFile.setBytes(bytes);
                    serverFile.setSendId(friend_id);
                    serverFile.setReceiveId(login_id);
                    serverFile.setFileName(Build.MANUFACTURER + "-" + UUID.randomUUID() + ".jpg");
                    connection = Client_UserHandler.getConnection();
                    IMResponse resp = new IMResponse();
                    Header header = new Header();
                    header.setHandlerId(Handlers.MESSAGE);
                    header.setCommandId(Commands.USER_FILE_REQUEST);
                    resp.setHeader(header);
                    resp.writeEntity(new FileDTO(serverFile));
                    connection.sendResponse(resp);

                    post(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                getPath(selectedImage);
                                InputStream is;
                                is = Chat_Activity.this.getContentResolver().openInputStream(selectedImage);
                                bytes = new byte[is.available()];
                                is.read(bytes);
                                is.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            } finally {
                            }
                        }
                    });
                }
            }
        }
    };


    //獲取照片路徑
    public String getPath(Uri uri){
        String[] filePathColumn={MediaStore.Images.Media.DATA};

        Cursor cursor= this.getContentResolver().query(uri, filePathColumn, null, null, null);
        cursor.moveToFirst();
        int columnIndex=cursor.getColumnIndex(filePathColumn[0]);
        return cursor.getString(columnIndex);
    }

    //處理照片
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        // usedView is a bool that checks is a view was destroyed and this was reused.
        // if it wasn't reused, this means we create a new one.
        if (requestCode == CAMERA_PIC_REQUEST) {
            try{
                selectedImage = data.getData();
                getPath(selectedImage);
                InputStream is;
                is = this.getContentResolver().openInputStream(selectedImage);
                bytes = new byte[is.available()];
                is.read(bytes);
                is.close();
                fileHandler.obtainMessage(1).sendToTarget();
            }
            catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException i) {
                i.printStackTrace();
            }
        }
        if (requestCode == GALLERY_PIC_REQUEST){
            try {
                selectedImage = data.getData();
                getPath(selectedImage);
                InputStream is;
                is = this.getContentResolver().openInputStream(selectedImage);
                bytes = new byte[is.available()];
                is.read(bytes);
                is.close();
                fileHandler.obtainMessage(1).sendToTarget();

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException i) {
                i.printStackTrace();
            }

        }
    }
}
